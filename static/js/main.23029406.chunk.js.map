{"version":3,"sources":["socket.ts","api/comments.ts","utils/sanitizeMessage.ts","components/CommentForm/quillConfig.ts","components/Loader/Loader.tsx","components/CommentForm/CommentForm.tsx","components/ModalWindow/ModalWindow.tsx","components/Comment/Comment.tsx","components/CommentsList/CommentsList.tsx","components/Selector/Selector.tsx","helpers/getSearchWith.ts","components/SelectorsPanel/SelectorsPanel.tsx","App.tsx","index.tsx"],"names":["socket","io","transports","BASE_URL","getTopComments","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","sortBy","sortOrder","page","response","wrap","_context","prev","next","axios","get","concat","sent","abrupt","data","stop","_x","_x2","_x3","apply","arguments","getChildrenCommentsByID","_ref2","_callee2","id","_context2","_x4","createComment","_ref3","_callee3","payload","_context3","post","headers","status","Error","_x5","getFile","_ref4","_callee4","fileLink","_context4","responseType","_x6","commentsApi","sanitizeMessage","message","decodedMessage","he","decode","sanitizeHtml","allowedTags","allowedAttributes","a","exclusiveFilter","frame","text","trim","modules","toolbar","formats","Loader","_jsx","className","children","initialFormData","userName","email","homePage","parentId","imageFile","textFile","CommentForm","onSubmitHideForm","_ref$parentId","_useState","useState","_objectSpread","_useState2","_slicedToArray","formData","setFormData","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","recaptchaResponse","setRecaptchaResponse","_useState7","_useState8","count","setCount","handleInputChange","event","_event$target","target","value","prevData","_defineProperty","handleSubmit","sanitizedMessage","preparedFormData","preventDefault","Notify","failure","timeout","console","log","FormData","Object","entries","forEach","key","append","emit","t0","prevCount","_Fragment","_jsxs","onSubmit","htmlFor","type","required","pattern","onChange","title","ReactQuill","theme","placeholder","accept","files","ReCAPTCHA","sitekey","ModalWindow","isOpen","onClose","fileType","fileSrc","textContent","Modal","open","center","closeOnOverlayClick","classNames","modal","overlay","modalAnimationIn","overlayAnimationIn","animationDuration","src","alt","Comment","React","memo","comment","level","childrenComments","setChildrenComments","showForm","setShowForm","isImageModalOpen","setImageModalOpen","isTextModalOpen","setTextModalOpen","_useState9","_useState10","textModalContent","setTextModalContent","image_link","text_file_link","loadChildrenComments","comments","error","loadTextFileContent","fileBlob","useEffect","handleNewComment","newComment","parent_comment_id","prevComments","_toConsumableArray","on","off","handleTextFileClick","author","user_name","Date","created_at","toLocaleString","dangerouslySetInnerHTML","__html","onClick","prevState","toString","length","map","childComment","CommentsList","topComments","topComment","Selector","options","defaultValue","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","updateSearchParams","_value$split","split","_value$split2","newParams","currentParams","paramsToUpdate","URLSearchParams","delete","Array","isArray","part","set","getSearchWith","option","_option","optionValue","optionName","SelectorsPanel","App","setTopComments","currentPage","Number","loadTopComments","finish","updatedComments","insertionIndex","findIndex","compareValueNewComment","compareValueComment","push","splice","ReactDOM","render","StrictMode","HashRouter","Routes","Route","path","element","Navigate","to","replace","document","getElementById"],"mappings":"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","file":"static/js/main.23029406.chunk.js","sourcesContent":["import { io } from 'socket.io-client';\n\nconst BASE_URL = 'https://comments-spa-test.onrender.com';\n// const BASE_URL = 'http://localhost:5000';\n\nconst socket = io(BASE_URL, {\n  transports: ['websocket'],\n});\n\nexport default socket;\n","/* eslint-disable no-console */\nimport axios from 'axios';\nimport { CommentType } from '../types/CommentType';\n\nconst BASE_URL = 'https://comments-spa-test.onrender.com';\n// const BASE_URL = 'http://localhost:5000';\n\nconst getTopComments = async (\n  sortBy: string,\n  sortOrder: string,\n  page: number,\n  // perPage: number,\n): Promise<CommentType[]> => {\n  const response = await axios\n    .get(`${BASE_URL}/comments?sortBy=${sortBy}&sortOrder=${sortOrder}&page=${page}`);\n\n  return response.data;\n};\n\nconst getChildrenCommentsByID = async (id: number): Promise<CommentType[]> => {\n  const response = await axios\n    .get(`${BASE_URL}/comments/${id}/children`);\n\n  return response.data;\n};\n\nconst createComment = async (payload: FormData) => {\n  const response = await axios.post(`${BASE_URL}/comments`, payload, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n\n  if (response.status !== 200) {\n    throw new Error('Error submitting comment');\n  }\n\n  return response.data;\n};\n\nconst getFile = async (fileLink: string): Promise<Blob> => {\n  const response = await axios.get(`${BASE_URL}/${fileLink}`, {\n    responseType: 'blob',\n  });\n\n  return response.data;\n};\n\nexport const commentsApi = {\n  getTopComments,\n  getChildrenCommentsByID,\n  createComment,\n  getFile,\n};\n","import he from 'he';\nimport sanitizeHtml from 'sanitize-html';\n\nexport const sanitizeMessage = (message: string): string => {\n  // Decode the characters escaped by ReactQuill\n  const decodedMessage = he.decode(message);\n\n  const sanitizedMessage = sanitizeHtml(decodedMessage, {\n    allowedTags: ['a', 'pre', 'code', 'em', 'strong'],\n    allowedAttributes: {\n      a: ['href', 'title'],\n    },\n    exclusiveFilter: (frame) => {\n      return !frame.text.trim();\n    },\n  });\n\n  return sanitizedMessage;\n};\n","export const modules = {\n  toolbar: [\n    ['bold', 'italic'],\n    ['link'],\n    ['code-block'],\n  ],\n};\n\nexport const formats = ['bold', 'italic', 'link', 'code-block'];\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport './CommentForm.scss';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport socket from '../../socket';\nimport { sanitizeMessage } from '../../utils/sanitizeMessage';\nimport { modules, formats } from './quillConfig';\nimport { Loader } from '../Loader/Loader';\nimport { FormDataType } from '../../types/FormDataType';\nimport { commentsApi } from '../../api/comments';\n\ninterface Props {\n  onSubmitHideForm?: () => void;\n  parentId?: string | null;\n}\n\nconst initialFormData: FormDataType = {\n  userName: '',\n  email: '',\n  homePage: '',\n  message: '',\n  parentId: null,\n  imageFile: null,\n  textFile: null,\n};\n\nexport const CommentForm: React.FC<Props> = ({\n  onSubmitHideForm,\n  parentId = null,\n}) => {\n  const [formData, setFormData] = useState<FormDataType>({ ...initialFormData, parentId });\n  const [isLoading, setIsLoading] = useState(false);\n  const [recaptchaResponse, setRecaptchaResponse] = useState<string | null>(null);\n  const [count, setCount] = useState(0);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { id, value } = event.target;\n\n    setFormData((prevData) => ({ ...prevData, [id]: value }));\n  };\n\n  const handleMessageChange = (value: string) => {\n    setFormData((prevData) => ({ ...prevData, message: value }));\n  };\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { files } = event.target;\n\n    const imageFile = files ? files[0] : null;\n\n    if (imageFile) {\n      setFormData((prevData) => ({ ...prevData, imageFile }));\n    }\n  };\n\n  const handleTextFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { files } = event.target;\n\n    const textFile = files ? files[0] : null;\n\n    if (textFile) {\n      setFormData((prevData) => ({ ...prevData, textFile }));\n    }\n  };\n\n  const resetFormData = () => {\n    setFormData(initialFormData);\n  };\n\n  const handleRecaptchaChange = (value: string | null) => {\n    setRecaptchaResponse(value);\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!recaptchaResponse) {\n      Notify.failure('Please complete the CAPTCHA.', { timeout: 5000 });\n\n      return;\n    }\n\n    if (!formData.message) {\n      Notify.failure('Please enter a message.', { timeout: 5000 });\n\n      return;\n    }\n\n    setIsLoading(true);\n\n    const sanitizedMessage = sanitizeMessage(formData.message);\n\n    const preparedFormData: FormDataType = {\n      ...formData,\n      message: sanitizedMessage,\n    };\n\n    console.log('preparedFormData when submitting:', preparedFormData);\n\n    const payload = new FormData();\n\n    Object.entries(preparedFormData).forEach(([key, value]) => {\n      if (value !== null) {\n        payload.append(key, value);\n      }\n    });\n\n    payload.append('recaptchaResponse', recaptchaResponse);\n\n    try {\n      const response = await commentsApi.createComment(payload);\n\n      console.log('Comment submitted successfully:', response);\n\n      // Emit event to refresh comments with the new comment data\n      socket.emit('new_comment', response);\n    } catch (error) {\n      Notify.failure('An error occurred while submitting the comment. Please try again.', { timeout: 5000 });\n    }\n\n    setCount((prevCount => prevCount + 1));\n    resetFormData();\n    setIsLoading(false);\n\n    if (onSubmitHideForm) {\n      onSubmitHideForm();\n    }\n  };\n\n  return (\n    <>\n      {isLoading\n        ? (\n          <Loader />\n        )\n        : (\n          <form className=\"Form\" onSubmit={handleSubmit} key={count}>\n            <h2 className=\"Form__title\">Add Your Comment</h2>\n            <div className=\"Form__group\">\n              <label htmlFor=\"username\" className=\"Form__label\">\n                <p className=\"Form__caption\">User Name (required):</p>\n\n                <input\n                  type=\"text\"\n                  id=\"userName\"\n                  required\n                  pattern=\"[A-Za-z0-9 ]+\"\n                  className=\"Form__input\"\n                  onChange={handleInputChange}\n                />\n              </label>\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"email\" className=\"Form__label\">\n                <p className=\"Form__caption\">E-mail (required):</p>\n\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  required\n                  className=\"Form__input\"\n                  onChange={handleInputChange}\n                  pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n                  title=\"Please enter a valid email address (example: johndoe@example.com)\"\n                />\n              </label>\n\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"homepage\" className=\"Form__label\">\n                <p className=\"Form__caption\">Home page (optional):</p>\n\n                <input\n                  type=\"url\"\n                  id=\"homePage\"\n                  className=\"Form__input\"\n                  onChange={handleInputChange}\n                />\n              </label>\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"message\" className=\"Form__label\">\n                <p className=\"Form__caption\">Text (required):</p>\n              </label>\n\n              <div className=\"Form__messageBlock\">\n                <ReactQuill\n                  value={formData.message}\n                  onChange={handleMessageChange}\n                  modules={modules}\n                  formats={formats}\n                  theme=\"snow\"\n                  placeholder=\"Enter your comment here...\"\n                />\n              </div>\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"imageFile\" className=\"Form__label\">\n                <p className=\"Form__caption\">\n                  Upload Image (JPG, GIF, PNG, max 320x240px):\n                </p>\n\n                <input\n                  type=\"file\"\n                  id=\"imageFile\"\n                  accept=\"image/jpeg,image/gif,image/png\"\n                  className=\"Form__input Form__inputFile\"\n                  onChange={handleImageUpload}\n                />\n              </label>\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"textFile\" className=\"Form__label\">\n                <p className=\"Form__caption\">\n                  Upload Text File (TXT, max 100KB):\n                </p>\n\n                <input\n                  type=\"file\"\n                  id=\"textFile\"\n                  accept=\".txt\"\n                  className=\"Form__input Form__inputFile\"\n                  onChange={handleTextFileUpload}\n                />\n              </label>\n            </div>\n\n            <div className=\"Form__captcha\">\n              <ReCAPTCHA\n                sitekey=\"6LfMP3ElAAAAAOflJaX40X36kjx_xqOh1zVcDimq\"\n                onChange={handleRecaptchaChange}\n              />\n            </div>\n\n            <button type=\"submit\" className=\"Form__submitButton\">Submit</button>\n          </form>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport Modal from 'react-responsive-modal';\nimport './ModalWindow.scss';\nimport { Loader } from '../Loader/Loader';\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  fileType: 'image' | 'text';\n  fileSrc: string;\n  textContent?: string;\n}\n\nexport const ModalWindow: React.FC<Props> = ({\n  isOpen,\n  onClose,\n  fileType,\n  fileSrc,\n  textContent,\n}) => {\n  return (\n    <Modal\n      open={isOpen}\n      onClose={onClose}\n      center\n      closeOnOverlayClick\n      classNames={{\n        modal: 'ModalWindow',\n        overlay: 'ModalWindow__overlay',\n        modalAnimationIn: 'ModalWindow__animation',\n        overlayAnimationIn: 'ModalWindow__animation',\n      }}\n      animationDuration={800}\n    >\n      {fileType === 'image' && <img src={fileSrc} alt=\"Attachment\" />}\n\n      {fileType === 'text'\n        && (textContent\n          ? (\n            <pre>{textContent}</pre>\n          )\n          : (\n            <Loader />\n          ))}\n    </Modal>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport './Comment.scss';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport socket from '../../socket';\nimport { CommentType } from '../../types/CommentType';\nimport { commentsApi } from '../../api/comments';\nimport { CommentForm } from '../CommentForm/CommentForm';\nimport { ModalWindow } from '../ModalWindow/ModalWindow';\n\nconst BASE_URL = 'https://comments-spa-test.onrender.com';\n\ninterface Props {\n  comment: CommentType;\n  level: number;\n}\n\nexport const Comment: React.FC<Props> = React.memo(({ comment, level }) => {\n  const [childrenComments, setChildrenComments] = useState<CommentType[]>([]);\n  const [showForm, setShowForm] = useState(false);\n  const [isImageModalOpen, setImageModalOpen] = useState(false);\n  const [isTextModalOpen, setTextModalOpen] = useState(false);\n  const [textModalContent, setTextModalContent] = useState('File is empty');\n\n  const { id, image_link, text_file_link } = comment;\n\n  const loadChildrenComments = async () => {\n    try {\n      const comments = await commentsApi.getChildrenCommentsByID(id);\n\n      setChildrenComments(comments);\n    } catch (error) {\n      console.error(`Error loading comments for comment with id ${id}:`, error);\n\n      Notify.failure(\n        `Error loading comments for comment with id ${id}. Please try again.`,\n        { timeout: 5000 },\n      );\n    }\n  };\n\n  const loadTextFileContent = async (fileLink: string) => {\n    try {\n      const fileBlob = await commentsApi.getFile(fileLink);\n      const text = await fileBlob.text();\n\n      return text;\n    } catch (error) {\n      console.error('Error loading text file:', error);\n\n      Notify.failure(\n        'Error loading text file. Please try again.',\n        { timeout: 5000 },\n      );\n\n      return '';\n    }\n  };\n\n  useEffect(() => {\n    loadChildrenComments();\n  }, [id]);\n\n  useEffect(() => {\n    const handleNewComment = (newComment: CommentType) => {\n      // Check if the new comment is a direct child of the current comment\n      if (newComment.parent_comment_id === id) {\n        setChildrenComments((prevComments) => [...prevComments, newComment]);\n      }\n    };\n\n    // Add event listener for 'new_childComment' event from the WebSocket\n    socket.on('new_childComment', handleNewComment);\n\n    // Clean up the event listener when the component is unmounted\n    return () => {\n      socket.off('new_childComment', handleNewComment);\n    };\n  }, [id]);\n\n  const handleImageClick = () => {\n    setImageModalOpen(true);\n  };\n\n  const handleTextFileClick = async () => {\n    setTextModalOpen(true);\n    const text = await loadTextFileContent(`${text_file_link}`);\n\n    setTextModalContent(text);\n  };\n\n  const closeImageModal = () => {\n    setImageModalOpen(false);\n  };\n\n  const closeTextModal = () => {\n    setTextModalOpen(false);\n  };\n\n  return (\n    <>\n      <div className={`Comment Comment--level-${level}`}>\n        <div className=\"Comment__wrapper\">\n          <img\n            className=\"Comment__avatar\"\n            src={`https://avatars.dicebear.com/api/human/${comment.author.email}.svg`}\n            alt=\"User avatar\"\n          />\n\n          <div className=\"Comment__body\">\n            <div className=\"Comment__header\">\n              <span className=\"Comment__authorName\">\n                {comment.author.user_name}\n              </span>\n\n              <span className=\"Comment__date\">\n                {new Date(comment.created_at).toLocaleString()}\n              </span>\n            </div>\n\n            <p\n              className=\"Comment__text\"\n              dangerouslySetInnerHTML={{ __html: comment.text }}\n            />\n\n            {(image_link || text_file_link) && (\n              <div className=\"Comment__attachments\">\n                <span>Files attached:</span>\n\n                {image_link && (\n                  <img\n                    className=\"Comment__attachedImage\"\n                    src={`${BASE_URL}/${image_link}`}\n                    alt=\"Attached\"\n                    onClick={handleImageClick}\n                  />\n                )}\n\n                {text_file_link && (\n                  <div\n                    className=\"Comment__fileIcon\"\n                    onClick={handleTextFileClick}\n                  >\n                  </div>\n                )}\n              </div>\n            )}\n\n            <>\n              {isImageModalOpen && (\n                <ModalWindow\n                  isOpen={isImageModalOpen}\n                  onClose={closeImageModal}\n                  fileType=\"image\"\n                  fileSrc={`${BASE_URL}/${image_link}`}\n                />\n              )}\n\n              {isTextModalOpen && (\n                <ModalWindow\n                  isOpen={isTextModalOpen}\n                  onClose={closeTextModal}\n                  fileType=\"text\"\n                  fileSrc={`${BASE_URL}/${text_file_link}`}\n                  textContent={textModalContent}\n                />\n              )}\n            </>\n          </div>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"Comment__answerButton\"\n          onClick={() => setShowForm((prevState) => !prevState)}\n        >\n          {showForm ? '— Answer' : 'Answer'}\n        </button>\n\n        {showForm && (\n          <CommentForm\n            onSubmitHideForm={() => setShowForm(false)}\n            parentId={id.toString()}\n          />\n        )}\n      </div>\n\n      <>\n        {childrenComments.length > 0 && (\n          <>\n            {childrenComments.map((childComment) => (\n              <Comment\n                comment={childComment}\n                level={level < 10 ? level + 1 : level}\n                key={childComment.id}\n              />\n            ))}\n          </>\n        )}\n      </>\n    </>\n  );\n});\n","import React from 'react';\nimport { CommentType } from '../../types/CommentType';\nimport { Comment } from '../Comment/Comment';\n\ninterface Props {\n  topComments: CommentType[];\n}\n\nexport const CommentsList: React.FC<Props> = React.memo(({ topComments }) => {\n  return (\n    <div className=\"CommentsList\">\n      {topComments.map((topComment) => (\n        <Comment\n          comment={topComment}\n          level={1}\n          key={topComment.id}\n        />\n      ))}\n    </div>\n  );\n});\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport './Selector.scss';\nimport { getSearchWith } from '../../helpers/getSearchWith';\n\ntype Props = {\n  options: string[][];\n  defaultValue: string | number;\n};\n\nexport const Selector: React.FC<Props> = ({\n  options,\n  defaultValue,\n}) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const updateSearchParams = (value: string) => {\n    const [sortBy, sortOrder] = value.split(':');\n\n    const newParams = getSearchWith(searchParams, {\n      sortBy,\n      sortOrder,\n      page: '1',\n    });\n\n    setSearchParams(newParams);\n  };\n\n  return (\n    <select\n      className=\"Selector\"\n      defaultValue={defaultValue}\n      onChange={(event) => updateSearchParams(event.target.value)}\n    >\n      {options.map((option) => {\n        const [optionValue, optionName] = option;\n\n        return (\n          <option\n            key={optionValue}\n            className=\"Selector__option\"\n            value={optionValue}\n          >\n            {optionName}\n          </option>\n        );\n      })}\n    </select>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null;\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(currentParams.toString());\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate).forEach(([key, value]) => {\n    if (value === null) {\n      newParams.delete(key);\n    } else if (Array.isArray(value)) {\n      // we delete the key to remove old values\n      newParams.delete(key);\n\n      value.forEach((part) => {\n        newParams.append(key, part);\n      });\n    } else {\n      newParams.set(key, value);\n    }\n  });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport './SelectorsPanel.scss';\nimport { Selector } from '../Selector/Selector';\n\nexport const SelectorsPanel = () => {\n  const [searchParams] = useSearchParams();\n\n  const sortBy = searchParams.get('sortBy') || 'created_at:desc';\n\n  const sortByOptions = [\n    ['user_name:asc', 'User name: A - Z'],\n    ['user_name:desc', 'User name: Z - A'],\n    ['email:asc', 'Email: A - Z'],\n    ['email:desc', 'Email: Z - A'],\n    ['created_at:desc', 'Newest first'],\n    ['created_at:asc', 'Oldest first'],\n  ];\n\n  return (\n    <div className=\"SelectorsPanel\">\n      <div className=\"SelectorsPanel__selector\">\n        <div className=\"SelectorsPanel__title\">Sort by</div>\n\n        <Selector\n          options={sortByOptions}\n          defaultValue={sortBy}\n        />\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport './App.scss';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport socket from './socket';\nimport { CommentsList } from './components/CommentsList/CommentsList';\nimport { CommentForm } from './components/CommentForm/CommentForm';\nimport { Loader } from './components/Loader/Loader';\nimport { commentsApi } from './api/comments';\nimport { CommentType } from './types/CommentType';\nimport { SelectorsPanel } from './components/SelectorsPanel/SelectorsPanel';\n\nexport const App: React.FC = () => {\n  const [topComments, setTopComments] = useState<CommentType[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [searchParams] = useSearchParams();\n\n  const sortBy = searchParams.get('sortBy') || 'created_at';\n  const sortOrder = searchParams.get('sortOrder') || 'desc';\n  const currentPage = Number(searchParams.get('page')) || 1;\n\n  const loadTopComments = async () => {\n    setIsLoading(true);\n\n    try {\n      const comments = await commentsApi.getTopComments(sortBy, sortOrder, currentPage);\n\n      console.log('Loaded topComments:', comments);\n\n      setTopComments(comments);\n    } catch (error) {\n      console.error('Error loading top comments:', error);\n\n      Notify.failure(\n        'Error loading top comments. Please try again.',\n        { timeout: 5000 },\n      );\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // First useEffect hook to handle WebSocket event\n  useEffect(() => {\n    // const handleNewComment = (newComment: CommentType) => {\n    //   setTopComments((prevComments) => [...prevComments, newComment]);\n    // };\n\n    const handleNewComment = (newComment: CommentType) => {\n      setTopComments((prevComments) => {\n        const updatedComments = [...prevComments];\n\n        const insertionIndex = updatedComments.findIndex((comment) => {\n          let compareValueNewComment: any;\n          let compareValueComment: any;\n\n          switch (sortBy) {\n            case 'user_name':\n              compareValueNewComment = newComment.author.user_name;\n              compareValueComment = comment.author.user_name;\n              break;\n            case 'email':\n              compareValueNewComment = newComment.author.email;\n              compareValueComment = comment.author.email;\n              break;\n            default:\n              compareValueNewComment = newComment[sortBy as keyof CommentType];\n              compareValueComment = comment[sortBy as keyof CommentType];\n          }\n\n          if (sortOrder === 'asc') {\n            return compareValueNewComment < compareValueComment;\n          }\n\n          return compareValueNewComment > compareValueComment;\n        });\n\n        if (insertionIndex === -1) {\n          updatedComments.push(newComment);\n        } else {\n          updatedComments.splice(insertionIndex, 0, newComment);\n        }\n\n        return updatedComments;\n      });\n    };\n\n    // Add event listener for 'new_topComment' event from the WebSocket\n    socket.on('new_topComment', handleNewComment);\n\n    return () => {\n    // Clean up the event listener when the component is unmounted\n      socket.off('new_topComment');\n    };\n  }, [sortBy, sortOrder, currentPage]);\n\n  // Second useEffect hook to fetch data when sortBy or sortOrder change\n  useEffect(() => {\n    loadTopComments();\n  }, [sortBy, sortOrder, currentPage]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"App\">\n        <h1 className=\"App__title\">Comments</h1>\n\n        <div className=\"App__main\">\n\n          <SelectorsPanel />\n\n          {isLoading\n            ? (\n              <Loader />\n            )\n            : (\n              <CommentsList topComments={topComments} />\n            )}\n        </div>\n\n        <div className=\"App__bottom\">\n          <CommentForm />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  Routes, Route, Navigate, HashRouter,\n} from 'react-router-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route path=\"home\" element={<Navigate to=\"../\" replace />} />\n        </Route>\n      </Routes>\n    </HashRouter>\n    {/* <App /> */}\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}