{"version":3,"sources":["api/comments.ts","components/Loader/Loader.tsx","components/CommentForm/CommentForm.tsx","components/Comment/Comment.tsx","components/CommentsList/CommentsList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getTopComments","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","axios","get","concat","sent","abrupt","data","stop","apply","arguments","getChildrenCommentsByID","_ref2","_callee2","id","_context2","_x","createComment","_ref3","_callee3","payload","_context3","post","headers","console","log","t0","error","_x2","commentsApi","Loader","_jsx","className","children","initialFormData","userName","email","homePage","message","parentId","imageFile","textFile","CommentForm","onSubmitLoadComments","onSubmitHideForm","_ref$parentId","_useState","useState","_useState2","_slicedToArray","formData","setFormData","_useState3","_useState4","setMessage","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","count","setCount","handleInputChange","event","_event$target","target","value","prevData","_objectSpread","_defineProperty","handleSubmit","decodedMessage","sanitizedMessage","updatedFormData","preventDefault","he","decode","sanitizeHtml","allowedTags","allowedAttributes","a","exclusiveFilter","frame","tag","text","trim","FormData","Object","entries","forEach","_ref4","key","append","prevCount","_Fragment","_jsxs","onSubmit","htmlFor","type","required","pattern","onChange","ReactQuill","modules","toolbar","formats","theme","accept","files","Comment","React","memo","comment","level","childrenComments","setChildrenComments","showForm","setShowForm","loadChildrenComments","comments","useEffect","src","alt","author","user_name","Date","created_at","toLocaleString","dangerouslySetInnerHTML","__html","onClick","prevState","toString","length","map","childComment","CommentsList","topComments","topComment","App","setTopComments","loadTopComments","finish","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47733291.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport axios from 'axios';\nimport { CommentType } from '../types/CommentType';\n\nconst BASE_URL = 'https://comments-spa-test.onrender.com';\n// const BASE_URL = 'http://localhost:5000';\n\nconst getTopComments = async (): Promise<CommentType[]> => {\n  const response = await axios\n    .get(`${BASE_URL}/comments`);\n\n  return response.data;\n};\n\nconst getChildrenCommentsByID = async (id: number): Promise<CommentType[]> => {\n  const response = await axios\n    .get(`${BASE_URL}/comments/${id}/children`);\n\n  return response.data;\n};\n\nconst createComment = async (payload: FormData) => {\n  try {\n    const response = await axios.post(`${BASE_URL}/comments`, payload, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n\n    console.log('Comment submitted successfully', response.data);\n  } catch (error) {\n    console.error('Error submitting comment:', error);\n  }\n};\n\nexport const commentsApi = {\n  getTopComments,\n  getChildrenCommentsByID,\n  createComment,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport './CommentForm.scss';\n\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport sanitizeHtml from 'sanitize-html';\nimport he from 'he';\n\nimport { Loader } from '../Loader/Loader';\nimport { FormDataType } from '../../types/FormDataType';\nimport { commentsApi } from '../../api/comments';\n\ninterface Props {\n  onSubmitLoadComments: () => Promise<void>;\n  onSubmitHideForm?: () => void;\n  parentId?: string | null;\n}\n\nconst initialFormData: FormDataType = {\n  userName: '',\n  email: '',\n  homePage: '',\n  message: '',\n  parentId: null,\n  imageFile: null,\n  textFile: null,\n};\n\nexport const CommentForm: React.FC<Props> = ({\n  onSubmitLoadComments,\n  onSubmitHideForm,\n  parentId = null,\n}) => {\n  const [formData, setFormData] = useState<FormDataType>(initialFormData);\n  const [message, setMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [count, setCount] = useState(0);\n\n  const modules = {\n    toolbar: [\n      ['bold', 'italic'],\n      ['link'],\n      ['code-block'],\n    ],\n  };\n\n  const formats = ['bold', 'italic', 'link', 'code-block'];\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { id, value } = event.target;\n\n    setFormData((prevData) => ({ ...prevData, [id]: value }));\n  };\n\n  const handleMessageChange = (value: React.SetStateAction<string>) => {\n    setMessage(value);\n  };\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { files } = event.target;\n\n    const imageFile = files ? files[0] : null;\n\n    if (imageFile) {\n      setFormData((prevData) => ({ ...prevData, imageFile }));\n    }\n  };\n\n  const handleTextFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { files } = event.target;\n\n    const textFile = files ? files[0] : null;\n\n    if (textFile) {\n      setFormData((prevData) => ({ ...prevData, textFile }));\n    }\n  };\n\n  const resetFormData = () => {\n    setFormData(initialFormData);\n  };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    // Decode the characters escaped by ReactQuill\n    const decodedMessage = he.decode(message);\n\n    const sanitizedMessage = sanitizeHtml(decodedMessage, {\n      allowedTags: ['a', 'pre', 'code', 'em', 'strong'],\n      allowedAttributes: {\n        a: ['href', 'title'],\n      },\n      // exclusiveFilter: (frame) => {\n      //   return !frame.text.trim();\n      // },\n\n      exclusiveFilter: (frame) => {\n        if (frame.tag === 'i' || frame.tag === 'strong') {\n          return false;\n        }\n\n        return !frame.text.trim();\n      },\n    });\n\n    // Process the sanitized HTML content\n    console.log('sanitizedMessage when submitting:', sanitizedMessage);\n\n    const updatedFormData = {\n      ...formData,\n      parentId,\n      message: sanitizedMessage,\n    };\n\n    console.log('updatedFormData when submitting:', updatedFormData);\n\n    const payload = new FormData();\n\n    Object.entries(updatedFormData).forEach(([key, value]) => {\n      if (value !== null) {\n        payload.append(key, value);\n      }\n    });\n\n    await commentsApi.createComment(payload);\n    await onSubmitLoadComments();\n\n    setCount((prevCount => prevCount + 1));\n    resetFormData();\n    setIsLoading(false);\n\n    if (onSubmitHideForm) {\n      onSubmitHideForm();\n    }\n  };\n\n  return (\n    <>\n      {isLoading\n        ? (\n          <Loader />\n        )\n        : (\n          <form className=\"Form\" onSubmit={handleSubmit} key={count}>\n            <h2 className=\"Form__title\">Add Your Comment</h2>\n            <div className=\"Form__group\">\n              <label htmlFor=\"username\" className=\"Form__label\">\n                <p className=\"Form__caption\">User Name (required):</p>\n\n                <input\n                  type=\"text\"\n                  id=\"userName\"\n                  required\n                  pattern=\"[A-Za-z0-9 ]+\"\n                  className=\"Form__input\"\n                  onChange={handleInputChange}\n                />\n              </label>\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"email\" className=\"Form__label\">\n                <p className=\"Form__caption\">E-mail (required):</p>\n\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  required\n                  className=\"Form__input\"\n                  onChange={handleInputChange}\n                />\n              </label>\n\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"homepage\" className=\"Form__label\">\n                <p className=\"Form__caption\">Home page (optional):</p>\n\n                <input\n                  type=\"url\"\n                  id=\"homePage\"\n                  className=\"Form__input\"\n                  onChange={handleInputChange}\n                />\n              </label>\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"message\" className=\"Form__label\">\n                <p className=\"Form__caption\">Text (required):</p>\n              </label>\n\n              <div className=\"Form__messageBlock\">\n                <ReactQuill\n                  value={message}\n                  onChange={handleMessageChange}\n                  modules={modules}\n                  formats={formats}\n                  theme=\"snow\"\n                />\n              </div>\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"imageFile\" className=\"Form__label\">\n                <p className=\"Form__caption\">\n                  Upload Image (JPG, GIF, PNG, max 320x240px):\n                </p>\n\n                <input\n                  type=\"file\"\n                  id=\"imageFile\"\n                  accept=\"image/jpeg,image/gif,image/png\"\n                  className=\"Form__input Form__inputFile\"\n                  onChange={handleImageUpload}\n                />\n              </label>\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"textFile\" className=\"Form__label\">\n                <p className=\"Form__caption\">\n                  Upload Text File (TXT, max 100KB):\n                </p>\n\n                <input\n                  type=\"file\"\n                  id=\"textFile\"\n                  accept=\".txt\"\n                  className=\"Form__input Form__inputFile\"\n                  onChange={handleTextFileUpload}\n                />\n              </label>\n            </div>\n\n            <button type=\"submit\" className=\"Form__submitButton\">Submit</button>\n          </form>\n        )}\n    </>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport './Comment.scss';\nimport { CommentType } from '../../types/CommentType';\nimport { commentsApi } from '../../api/comments';\nimport { CommentForm } from '../CommentForm/CommentForm';\n\ninterface Props {\n  comment: CommentType;\n  level: number;\n}\n\nexport const Comment: React.FC<Props> = React.memo(({ comment, level }) => {\n  const [childrenComments, setChildrenComments] = useState<CommentType[]>([]);\n  const [showForm, setShowForm] = useState(false);\n\n  const { id } = comment;\n\n  const loadChildrenComments = async () => {\n    try {\n      const comments = await commentsApi.getChildrenCommentsByID(id);\n\n      setChildrenComments(comments);\n    } catch (error) {\n      console.error(`Error loading comments for comment with id ${id}:`, error);\n    }\n  };\n\n  useEffect(() => {\n    loadChildrenComments();\n  }, [id]);\n\n  return (\n    <>\n      <div className={`Comment Comment--level-${level}`}>\n        <div className=\"Comment__wrapper\">\n          <img\n            className=\"Comment__avatar\"\n            src={`https://avatars.dicebear.com/api/human/${id}.svg`}\n            alt=\"\"\n          />\n\n          <div className=\"Comment__body\">\n            <div className=\"Comment__header\">\n              <span className=\"Comment__authorName\">\n                {comment.author.user_name}\n              </span>\n\n              <span className=\"Comment__date\">\n                {new Date(comment.created_at).toLocaleString()}\n              </span>\n            </div>\n\n            {/* <p className=\"Comment__text\">\n              {comment.text}\n            </p> */}\n            <p\n              className=\"Comment__text\"\n              dangerouslySetInnerHTML={{ __html: comment.text }}\n            />\n          </div>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"Comment__answerButton\"\n          onClick={() => setShowForm((prevState) => !prevState)}\n        >\n          {showForm ? '— Answer' : 'Answer'}\n        </button>\n\n        {showForm && (\n          <CommentForm\n            onSubmitLoadComments={loadChildrenComments}\n            onSubmitHideForm={() => setShowForm(false)}\n            parentId={id.toString()}\n          />\n        )}\n      </div>\n\n      <>\n        {childrenComments.length > 0 && (\n          <>\n            {childrenComments.map((childComment) => (\n              <Comment\n                comment={childComment}\n                level={level < 10 ? level + 1 : level}\n                key={childComment.id}\n              />\n            ))}\n          </>\n        )}\n      </>\n    </>\n  );\n});\n","import React from 'react';\nimport { CommentType } from '../../types/CommentType';\nimport { Comment } from '../Comment/Comment';\n\ninterface Props {\n  topComments: CommentType[];\n}\n\nexport const CommentsList: React.FC<Props> = React.memo(({ topComments }) => {\n  return (\n    <div className=\"CommentsList\">\n      {topComments.map((topComment) => (\n        <Comment\n          comment={topComment}\n          level={1}\n          key={topComment.id}\n        />\n      ))}\n    </div>\n  );\n});\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { CommentsList } from './components/CommentsList/CommentsList';\nimport { CommentForm } from './components/CommentForm/CommentForm';\nimport { Loader } from './components/Loader/Loader';\nimport { commentsApi } from './api/comments';\nimport { CommentType } from './types/CommentType';\n\nexport const App: React.FC = () => {\n  const [topComments, setTopComments] = useState<CommentType[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loadTopComments = async () => {\n    setIsLoading(true);\n\n    try {\n      const comments = await commentsApi.getTopComments();\n\n      console.log('Loaded topComments:', comments);\n\n      setTopComments(comments);\n    } catch (error) {\n      console.error('Error loading top comments:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTopComments();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"App\">\n        <h1 className=\"App__title\">Comments</h1>\n\n        <div className=\"App__main\">\n          {isLoading\n            ? (\n              <Loader />\n            )\n            : (\n              <CommentsList topComments={topComments} />\n            )}\n        </div>\n\n        <div className=\"App__bottom\">\n          <CommentForm onSubmitLoadComments={loadTopComments} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}