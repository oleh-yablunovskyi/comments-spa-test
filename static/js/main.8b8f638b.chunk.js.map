{"version":3,"sources":["socket.ts","api/comments.ts","utils/sanitizeMessage.ts","components/CommentForm/quillConfig.ts","components/Loader/Loader.tsx","components/CommentForm/CommentForm.tsx","components/ModalWindow/ModalWindow.tsx","components/Comment/Comment.tsx","components/CommentsList/CommentsList.tsx","App.tsx","index.tsx"],"names":["socket","io","transports","BASE_URL","getTopComments","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","axios","get","concat","sent","abrupt","data","stop","apply","arguments","getChildrenCommentsByID","_ref2","_callee2","id","_context2","_x","createComment","_ref3","_callee3","payload","_context3","post","headers","status","Error","_x2","getFile","_ref4","_callee4","fileLink","_context4","responseType","_x3","commentsApi","sanitizeMessage","message","decodedMessage","he","decode","sanitizeHtml","allowedTags","allowedAttributes","a","exclusiveFilter","frame","text","trim","modules","toolbar","formats","Loader","_jsx","className","children","initialFormData","userName","email","homePage","parentId","imageFile","textFile","CommentForm","onSubmitHideForm","_ref$parentId","_useState","useState","_objectSpread","_useState2","_slicedToArray","formData","setFormData","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","count","setCount","handleInputChange","event","_event$target","target","value","prevData","_defineProperty","handleSubmit","sanitizedMessage","preparedFormData","preventDefault","Notify","failure","timeout","console","log","FormData","Object","entries","forEach","key","append","emit","t0","prevCount","_Fragment","_jsxs","onSubmit","htmlFor","type","required","pattern","onChange","title","ReactQuill","theme","placeholder","accept","files","ModalWindow","isOpen","onClose","fileType","fileSrc","textContent","Modal","open","center","closeOnOverlayClick","classNames","modal","overlay","modalAnimationIn","overlayAnimationIn","animationDuration","src","alt","Comment","React","memo","comment","level","childrenComments","setChildrenComments","showForm","setShowForm","isImageModalOpen","setImageModalOpen","_useState7","_useState8","isTextModalOpen","setTextModalOpen","_useState9","_useState10","textModalContent","setTextModalContent","image_link","text_file_link","loadChildrenComments","comments","error","loadTextFileContent","fileBlob","useEffect","handleNewComment","newComment","parent_comment_id","prevComments","_toConsumableArray","on","off","handleTextFileClick","author","user_name","Date","created_at","toLocaleString","dangerouslySetInnerHTML","__html","onClick","prevState","toString","length","map","childComment","CommentsList","topComments","topComment","App","setTopComments","loadTopComments","finish","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b8f638b.chunk.js","sourcesContent":["import { io } from 'socket.io-client';\n\nconst BASE_URL = 'https://comments-spa-test.onrender.com';\n// const BASE_URL = 'http://localhost:5000';\n\nconst socket = io(BASE_URL, {\n  transports: ['websocket'],\n});\n\nexport default socket;\n","/* eslint-disable no-console */\nimport axios from 'axios';\nimport { CommentType } from '../types/CommentType';\n\nconst BASE_URL = 'https://comments-spa-test.onrender.com';\n// const BASE_URL = 'http://localhost:5000';\n\nconst getTopComments = async (): Promise<CommentType[]> => {\n  const response = await axios\n    .get(`${BASE_URL}/comments`);\n\n  return response.data;\n};\n\nconst getChildrenCommentsByID = async (id: number): Promise<CommentType[]> => {\n  const response = await axios\n    .get(`${BASE_URL}/comments/${id}/children`);\n\n  return response.data;\n};\n\nconst createComment = async (payload: FormData) => {\n  const response = await axios.post(`${BASE_URL}/comments`, payload, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  });\n\n  if (response.status !== 200) {\n    throw new Error('Error submitting comment');\n  }\n\n  return response.data;\n};\n\nconst getFile = async (fileLink: string): Promise<Blob> => {\n  const response = await axios.get(`${BASE_URL}/${fileLink}`, {\n    responseType: 'blob',\n  });\n\n  return response.data;\n};\n\nexport const commentsApi = {\n  getTopComments,\n  getChildrenCommentsByID,\n  createComment,\n  getFile,\n};\n","import he from 'he';\nimport sanitizeHtml from 'sanitize-html';\n\nexport const sanitizeMessage = (message: string): string => {\n  // Decode the characters escaped by ReactQuill\n  const decodedMessage = he.decode(message);\n\n  const sanitizedMessage = sanitizeHtml(decodedMessage, {\n    allowedTags: ['a', 'pre', 'code', 'em', 'strong'],\n    allowedAttributes: {\n      a: ['href', 'title'],\n    },\n    exclusiveFilter: (frame) => {\n      return !frame.text.trim();\n    },\n  });\n\n  return sanitizedMessage;\n};\n","export const modules = {\n  toolbar: [\n    ['bold', 'italic'],\n    ['link'],\n    ['code-block'],\n  ],\n};\n\nexport const formats = ['bold', 'italic', 'link', 'code-block'];\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport './CommentForm.scss';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n// import ReCAPTCHA from 'react-google-recaptcha';\nimport socket from '../../socket';\nimport { sanitizeMessage } from '../../utils/sanitizeMessage';\nimport { modules, formats } from './quillConfig';\nimport { Loader } from '../Loader/Loader';\nimport { FormDataType } from '../../types/FormDataType';\nimport { commentsApi } from '../../api/comments';\n\ninterface Props {\n  onSubmitHideForm?: () => void;\n  parentId?: string | null;\n}\n\nconst initialFormData: FormDataType = {\n  userName: '',\n  email: '',\n  homePage: '',\n  message: '',\n  parentId: null,\n  imageFile: null,\n  textFile: null,\n};\n\nexport const CommentForm: React.FC<Props> = ({\n  onSubmitHideForm,\n  parentId = null,\n}) => {\n  const [formData, setFormData] = useState<FormDataType>({ ...initialFormData, parentId });\n  const [isLoading, setIsLoading] = useState(false);\n  // const [recaptchaResponse, setRecaptchaResponse] = useState<string | null>(null);\n  const [count, setCount] = useState(0);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { id, value } = event.target;\n\n    setFormData((prevData) => ({ ...prevData, [id]: value }));\n  };\n\n  const handleMessageChange = (value: string) => {\n    setFormData((prevData) => ({ ...prevData, message: value }));\n  };\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { files } = event.target;\n\n    const imageFile = files ? files[0] : null;\n\n    if (imageFile) {\n      setFormData((prevData) => ({ ...prevData, imageFile }));\n    }\n  };\n\n  const handleTextFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { files } = event.target;\n\n    const textFile = files ? files[0] : null;\n\n    if (textFile) {\n      setFormData((prevData) => ({ ...prevData, textFile }));\n    }\n  };\n\n  const resetFormData = () => {\n    setFormData(initialFormData);\n  };\n\n  // const handleRecaptchaChange = (value: string | null) => {\n  //   setRecaptchaResponse(value);\n  // };\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    // if (!recaptchaResponse) {\n    //   Notify.failure('Please complete the CAPTCHA.', { timeout: 5000 });\n\n    //   return;\n    // }\n\n    if (!formData.message) {\n      Notify.failure('Please enter a message.', { timeout: 5000 });\n\n      return;\n    }\n\n    setIsLoading(true);\n\n    const sanitizedMessage = sanitizeMessage(formData.message);\n\n    const preparedFormData: FormDataType = {\n      ...formData,\n      message: sanitizedMessage,\n    };\n\n    console.log('preparedFormData when submitting:', preparedFormData);\n\n    const payload = new FormData();\n\n    Object.entries(preparedFormData).forEach(([key, value]) => {\n      if (value !== null) {\n        payload.append(key, value);\n      }\n    });\n\n    // payload.append('recaptchaResponse', recaptchaResponse);\n\n    try {\n      const response = await commentsApi.createComment(payload);\n\n      console.log('Comment submitted successfully:', response);\n\n      // Emit event to refresh comments with the new comment data\n      socket.emit('new_comment', response);\n    } catch (error) {\n      Notify.failure('An error occurred while submitting the comment. Please try again.', { timeout: 5000 });\n    }\n\n    setCount((prevCount => prevCount + 1));\n    resetFormData();\n    setIsLoading(false);\n\n    if (onSubmitHideForm) {\n      onSubmitHideForm();\n    }\n  };\n\n  return (\n    <>\n      {isLoading\n        ? (\n          <Loader />\n        )\n        : (\n          <form className=\"Form\" onSubmit={handleSubmit} key={count}>\n            <h2 className=\"Form__title\">Add Your Comment</h2>\n            <div className=\"Form__group\">\n              <label htmlFor=\"username\" className=\"Form__label\">\n                <p className=\"Form__caption\">User Name (required):</p>\n\n                <input\n                  type=\"text\"\n                  id=\"userName\"\n                  required\n                  pattern=\"[A-Za-z0-9 ]+\"\n                  className=\"Form__input\"\n                  onChange={handleInputChange}\n                />\n              </label>\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"email\" className=\"Form__label\">\n                <p className=\"Form__caption\">E-mail (required):</p>\n\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  required\n                  className=\"Form__input\"\n                  onChange={handleInputChange}\n                  pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n                  title=\"Please enter a valid email address (example: johndoe@example.com)\"\n                />\n              </label>\n\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"homepage\" className=\"Form__label\">\n                <p className=\"Form__caption\">Home page (optional):</p>\n\n                <input\n                  type=\"url\"\n                  id=\"homePage\"\n                  className=\"Form__input\"\n                  onChange={handleInputChange}\n                />\n              </label>\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"message\" className=\"Form__label\">\n                <p className=\"Form__caption\">Text (required):</p>\n              </label>\n\n              <div className=\"Form__messageBlock\">\n                <ReactQuill\n                  value={formData.message}\n                  onChange={handleMessageChange}\n                  modules={modules}\n                  formats={formats}\n                  theme=\"snow\"\n                  placeholder=\"Enter your comment here...\"\n                />\n              </div>\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"imageFile\" className=\"Form__label\">\n                <p className=\"Form__caption\">\n                  Upload Image (JPG, GIF, PNG, max 320x240px):\n                </p>\n\n                <input\n                  type=\"file\"\n                  id=\"imageFile\"\n                  accept=\"image/jpeg,image/gif,image/png\"\n                  className=\"Form__input Form__inputFile\"\n                  onChange={handleImageUpload}\n                />\n              </label>\n            </div>\n\n            <div className=\"Form__group\">\n              <label htmlFor=\"textFile\" className=\"Form__label\">\n                <p className=\"Form__caption\">\n                  Upload Text File (TXT, max 100KB):\n                </p>\n\n                <input\n                  type=\"file\"\n                  id=\"textFile\"\n                  accept=\".txt\"\n                  className=\"Form__input Form__inputFile\"\n                  onChange={handleTextFileUpload}\n                />\n              </label>\n            </div>\n\n            {/* <div className=\"Form__captcha\">\n              <ReCAPTCHA\n                sitekey=\"6LfMP3ElAAAAAOflJaX40X36kjx_xqOh1zVcDimq\"\n                onChange={handleRecaptchaChange}\n              />\n            </div> */}\n\n            <button type=\"submit\" className=\"Form__submitButton\">Submit</button>\n          </form>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport Modal from 'react-responsive-modal';\nimport './ModalWindow.scss';\nimport { Loader } from '../Loader/Loader';\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  fileType: 'image' | 'text';\n  fileSrc: string;\n  textContent?: string;\n}\n\nexport const ModalWindow: React.FC<Props> = ({\n  isOpen,\n  onClose,\n  fileType,\n  fileSrc,\n  textContent,\n}) => {\n  return (\n    <Modal\n      open={isOpen}\n      onClose={onClose}\n      center\n      closeOnOverlayClick\n      classNames={{\n        modal: 'ModalWindow',\n        overlay: 'ModalWindow__overlay',\n        modalAnimationIn: 'ModalWindow__animation',\n        overlayAnimationIn: 'ModalWindow__animation',\n      }}\n      animationDuration={800}\n    >\n      {fileType === 'image' && <img src={fileSrc} alt=\"Attachment\" />}\n\n      {fileType === 'text'\n        && (textContent\n          ? (\n            <pre>{textContent}</pre>\n          )\n          : (\n            <Loader />\n          ))}\n    </Modal>\n  );\n};\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport './Comment.scss';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport socket from '../../socket';\nimport { CommentType } from '../../types/CommentType';\nimport { commentsApi } from '../../api/comments';\nimport { CommentForm } from '../CommentForm/CommentForm';\nimport { ModalWindow } from '../ModalWindow/ModalWindow';\n\nconst BASE_URL = 'https://comments-spa-test.onrender.com';\n\ninterface Props {\n  comment: CommentType;\n  level: number;\n}\n\nexport const Comment: React.FC<Props> = React.memo(({ comment, level }) => {\n  const [childrenComments, setChildrenComments] = useState<CommentType[]>([]);\n  const [showForm, setShowForm] = useState(false);\n  const [isImageModalOpen, setImageModalOpen] = useState(false);\n  const [isTextModalOpen, setTextModalOpen] = useState(false);\n  const [textModalContent, setTextModalContent] = useState('File is empty');\n\n  const { id, image_link, text_file_link } = comment;\n\n  const loadChildrenComments = async () => {\n    try {\n      const comments = await commentsApi.getChildrenCommentsByID(id);\n\n      setChildrenComments(comments);\n    } catch (error) {\n      console.error(`Error loading comments for comment with id ${id}:`, error);\n\n      Notify.failure(\n        `Error loading comments for comment with id ${id}. Please try again.`,\n        { timeout: 5000 },\n      );\n    }\n  };\n\n  const loadTextFileContent = async (fileLink: string) => {\n    try {\n      const fileBlob = await commentsApi.getFile(fileLink);\n      const text = await fileBlob.text();\n\n      return text;\n    } catch (error) {\n      console.error('Error loading text file:', error);\n\n      Notify.failure(\n        'Error loading text file. Please try again.',\n        { timeout: 5000 },\n      );\n\n      return '';\n    }\n  };\n\n  useEffect(() => {\n    loadChildrenComments();\n  }, [id]);\n\n  useEffect(() => {\n    const handleNewComment = (newComment: CommentType) => {\n      // Check if the new comment is a direct child of the current comment\n      if (newComment.parent_comment_id === id) {\n        setChildrenComments((prevComments) => [...prevComments, newComment]);\n      }\n    };\n\n    // Add event listener for 'new_comment' event from the WebSocket\n    socket.on('new_comment', handleNewComment);\n\n    // Clean up the event listener when the component is unmounted\n    return () => {\n      socket.off('new_comment', handleNewComment);\n    };\n  }, [id]);\n\n  const handleImageClick = () => {\n    setImageModalOpen(true);\n  };\n\n  const handleTextFileClick = async () => {\n    setTextModalOpen(true);\n    const text = await loadTextFileContent(`${text_file_link}`);\n\n    setTextModalContent(text);\n  };\n\n  const closeImageModal = () => {\n    setImageModalOpen(false);\n  };\n\n  const closeTextModal = () => {\n    setTextModalOpen(false);\n  };\n\n  return (\n    <>\n      <div className={`Comment Comment--level-${level}`}>\n        <div className=\"Comment__wrapper\">\n          <img\n            className=\"Comment__avatar\"\n            src={`https://avatars.dicebear.com/api/human/${comment.author.email}.svg`}\n            alt=\"User avatar\"\n          />\n\n          <div className=\"Comment__body\">\n            <div className=\"Comment__header\">\n              <span className=\"Comment__authorName\">\n                {comment.author.user_name}\n              </span>\n\n              <span className=\"Comment__date\">\n                {new Date(comment.created_at).toLocaleString()}\n              </span>\n            </div>\n\n            <p\n              className=\"Comment__text\"\n              dangerouslySetInnerHTML={{ __html: comment.text }}\n            />\n\n            {(image_link || text_file_link) && (\n              <div className=\"Comment__attachments\">\n                <span>Files attached:</span>\n\n                {image_link && (\n                  <img\n                    className=\"Comment__attachedImage\"\n                    src={`${BASE_URL}/${image_link}`}\n                    alt=\"Attached\"\n                    onClick={handleImageClick}\n                  />\n                )}\n\n                {text_file_link && (\n                  <div\n                    className=\"Comment__fileIcon\"\n                    onClick={handleTextFileClick}\n                  >\n                  </div>\n                )}\n              </div>\n            )}\n\n            <>\n              {isImageModalOpen && (\n                <ModalWindow\n                  isOpen={isImageModalOpen}\n                  onClose={closeImageModal}\n                  fileType=\"image\"\n                  fileSrc={`${BASE_URL}/${image_link}`}\n                />\n              )}\n\n              {isTextModalOpen && (\n                <ModalWindow\n                  isOpen={isTextModalOpen}\n                  onClose={closeTextModal}\n                  fileType=\"text\"\n                  fileSrc={`${BASE_URL}/${text_file_link}`}\n                  textContent={textModalContent}\n                />\n              )}\n            </>\n          </div>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"Comment__answerButton\"\n          onClick={() => setShowForm((prevState) => !prevState)}\n        >\n          {showForm ? '— Answer' : 'Answer'}\n        </button>\n\n        {showForm && (\n          <CommentForm\n            onSubmitHideForm={() => setShowForm(false)}\n            parentId={id.toString()}\n          />\n        )}\n      </div>\n\n      <>\n        {childrenComments.length > 0 && (\n          <>\n            {childrenComments.map((childComment) => (\n              <Comment\n                comment={childComment}\n                level={level < 10 ? level + 1 : level}\n                key={childComment.id}\n              />\n            ))}\n          </>\n        )}\n      </>\n    </>\n  );\n});\n","import React from 'react';\nimport { CommentType } from '../../types/CommentType';\nimport { Comment } from '../Comment/Comment';\n\ninterface Props {\n  topComments: CommentType[];\n}\n\nexport const CommentsList: React.FC<Props> = React.memo(({ topComments }) => {\n  return (\n    <div className=\"CommentsList\">\n      {topComments.map((topComment) => (\n        <Comment\n          comment={topComment}\n          level={1}\n          key={topComment.id}\n        />\n      ))}\n    </div>\n  );\n});\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport socket from './socket';\nimport { CommentsList } from './components/CommentsList/CommentsList';\nimport { CommentForm } from './components/CommentForm/CommentForm';\nimport { Loader } from './components/Loader/Loader';\nimport { commentsApi } from './api/comments';\nimport { CommentType } from './types/CommentType';\n\nexport const App: React.FC = () => {\n  const [topComments, setTopComments] = useState<CommentType[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loadTopComments = async () => {\n    setIsLoading(true);\n\n    try {\n      const comments = await commentsApi.getTopComments();\n\n      console.log('Loaded topComments:', comments);\n\n      setTopComments(comments);\n    } catch (error) {\n      console.error('Error loading top comments:', error);\n\n      Notify.failure(\n        'Error loading top comments. Please try again.',\n        { timeout: 5000 },\n      );\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTopComments();\n\n    // Add event listener for real-time updates\n    socket.on('new_comment', (newComment: CommentType) => {\n      setTopComments((prevComments) => [...prevComments, newComment]);\n    });\n\n    return () => {\n    // Remove event listener on cleanup\n      socket.off('new_comment');\n    };\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"App\">\n        <h1 className=\"App__title\">Comments</h1>\n\n        <div className=\"App__main\">\n          {isLoading\n            ? (\n              <Loader />\n            )\n            : (\n              <CommentsList topComments={topComments} />\n            )}\n        </div>\n\n        <div className=\"App__bottom\">\n          <CommentForm />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}